#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('mati-42080-taller1-serviceclient:server');
const http = require('http');
const models = require('../models');
const amqp = require('amqplib/callback_api');
const product = require('../models').product;
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3002');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

models.sequelize.sync().then(function()
{
    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port, function()
    {
        debug('Server listening on port ' + server.address().port);
    });
    server.on('error', onError);
    server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val)
{
    const port = parseInt(val, 10);

    if (isNaN(port))
    {
        // named pipe
        return val;
    }

    if (port >= 0)
    {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error)
{
    if (error.syscall !== 'listen')
    {
        throw error;
    }

    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    //
    // handle specific listen errors with friendly messages
    switch (error.code)
    {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening()
{
    const address = server.address();
    const bind = typeof address === 'string' ? 'pipe ' + address  : 'port ' + address.port;
    debug('Listening on ' + bind);
}

const queueIp = "192.168.50.4";

amqp.connect('amqp://test:test@' + queueIp + ':5672', function(err, conn)
{
    conn.createChannel(function(err, ch)
    {
        const ex = 'products';

        ch.assertExchange(ex, 'fanout', {durable: false});
        ch.assertQueue('', {exclusive: true}, function(err, q)
        {
            console.log(" [*] Waiting for messages in %s. To exit press CTRL+C", q.queue);
            ch.bindQueue(q.queue, ex, '');

            ch.consume(q.queue, function(msg) {
                console.log(" [x] %s", msg.content.toString());
                const newProduct = JSON.parse(msg.content.toString());

                return product
                    .create({
                        id: newProduct.id,
                        name: newProduct.name,
                        description: newProduct.description,
                        weight: newProduct.weight,
                        width: newProduct.width,
                        height: newProduct.height,
                        depth: newProduct.depth,
                        information: newProduct.information,
                    })
                    .then(product => console.log(" Product created: " + product))
                    .catch(error => console.log(error));


            }, {noAck: true});
        });
    });
});